url: http://habrahabr.ru/posts/programming/

title: Программирование / Интересные публикации / Хабрахабр

description:
Сайт Open Crypto Audit Project сообщает о завершении второй стадии аудита кода популярного открытого средства шифрования TrueCrypt, разработчики которого 28 мая 2014 года очень странно покинули сцену, посоветовав переходить на BitLocker — решение для шифрования данных от Microsoft. По сути, аудит кода завершен, ребятам из OCAP осталось только написать финальный документ с выводами. Согласно результатам аудита, никакой закладки в TrueCrypt 7.1a нет. Аудиторы отметили только 4 потенциально нехороших места, которые не приводили к компрометации каких-либо данных при обычных условиях: Отсутствие проверки подлинности зашифрованных данных в заголовке тома Смешивание ключевого файла происходит не криптографически устойчивым образом Реализация AES может быть уязвима к атаке по времени CryptAcquireContext может оказаться неинициализированным без сообщений об ошибке Читать дальше →В прошлой публикации я рассказал как сделать наручные часы на основе Arduino с помощью 3D принтера. Следующий шаг был логичным — сделать настольный будильник из более менее стандартных модулей. На сборку будильника у меня ушло одно воскресенье. Корпус получился так себе — слишком простой. Краской задул из баллончика, вроде стало получше. Потом перерисую. Или сами перерисуйте, в Скетчапе например. Зато скетч очень красивый. С эффектом заката. Ну да ладно. Корпус часов собран из 4-х пластиковых деталей напечатанных вот на таком 3D принтере. Читать дальше →Magic Lantern (ML) — неофициальная прошивка для фотоаппаратов Canon, которая обеспечивает повышенную функциональность (например, dual-iso, стекинг по фокусу, raw-видео, тонкая настройка параметров съемки и многое другое). Прошивка устанавливается непосредственно на flash-карту, что позволяет безболезненно удалить ее или обновить простой заменой файлов. На хабре уже были публикации по данной прошивке, поэтому подробно расписывать преимущества и порядок установки я не буду. Расскажу, как попался на неявную и несмешную первоапрельскую шутку от разработчиков данной прошивки. Все описанные действия производились с использованием камеры Canon 650D со стоковой (1.01) прошивкой. 28 марта. Началось все тогда, когда жажда исследования чего-то нового накопилась до критической массы и в сети была случайно обнаружена информация о возможности автоматической съемки фокус-стека на моем фотоаппарате. Но данные возможности требовали установки неофициальной прошивки Magic Lantern. Быстрый поиск показал, что: текущая прошивка фотоаппарата не поддерживает текущие сборки ML; для модели 650D нет стабильной сборки, есть только ночные билды; некоторые функции ML в 650D не работают/работают криво; авторы предупреждают, что можно закирпичить фотоаппарат неверными действиями по прошивке. После чего фотоаппарат был успешно перепрошит на последнюю официальную версию для Canon 650D 1.04. И строго по инструкции, со сбросом всех настроек и полным форматированием карты, был установлен последний ночной билд Magic Lantern (от 28 марта). Читать дальше →Года четыре назад, в универе услышал о таком методе оптимизации, как генетический алгоритм. О нем везде сообщалось ровно два факта: он клёвый и он не работает. Вернее, работает, но медленно, ненадежно, и нигде его не стоит использовать. Зато он красиво может продемонстрировать механизмы эволюции. В этой статье я покажу красивый способ вживую посмотреть на процессы эволюции на примере работы этого простого метода. Нужно лишь немного математики, программирования и все это приправить воображением. Кратко об алгоритме Итак, что же такое генетический алгоритм? Это, прежде всего, метод многомерной оптимизации, т.е. метод поиска минимума многомерной функции. Потенциально этот метод можно использовать для глобальной оптимизации, но с этим возникают сложности, опишу их позднее. Сама суть метода заключается в том, что мы модулируем эволюционный процесс: у нас есть какая-то популяция (набор векторов), которая размножается, на которую воздействуют мутации и производится естественный отбор на основании минимизации целевой функции. Рассмотрим подробнее эти процессы. Читать дальше →Мне совершенно непонятна выгода от удобного интерфейса. Да, он красивый, с ним проще работать. Но как посчитать материальную пользу? Пять лет назад в аэропортах звучал синтезированный голос, объявляя прилёты и вылеты с разорванной интонацией после каждого слова. Иногда даже отличалась скорость речи для разных слов. И вот пару недель назад я заслушивался новыми объявлениями о вылетах. Было чувство, что их целиком записал профессиональный диктор, который всю жизнь учился на эту роль. Интерфейс стал лучше, он стал более натуральным. Стал ли я от этого больше летать? Вряд ли. Может, у меня появилось предпочтение между аэропортами? Не думаю, что это настолько важный момент. Тем не менее, зачем-то люди потратили время и деньги на приведение объявлений к естественному виду. И это очень круто! Мне нравится естественное представление информации автоматизированными системами, как будто с вами общается живой человек. Мне кажется, что это мелкие детали, которые формируют отношение к вашему продукту в целом. И если это отношение положительное, то вас будут выбирать в дальнейшем и рекомендовать друзьям. В статье я расскажу, как показывать адрес одной строкой так, будто его написал человек. Я не могу с уверенностью сказать, что, прочитав статью, вы увеличите прибыль. Но мне бы очень хотелось, чтобы как можно больше систем писали адреса красиво. Все правила, описанные ниже, мы выработали сами. Большинство из них используем или скоро подключим на dadata.ru. Итак...Концептуально фреймворк представляет собой набор поддерживаемых пользователем модулей реализующих различные функции робототехники. При работе Bubot строит сеть из процессов, которые могут асинхронно получать и отправлять сообщения между собой. Так же вы можете построить сеть из роботов, которые будут общаться между собой. Сеть процессов строится на базе стандартного Python модуля multiprocessing. Система обмена сообщениями и разделяемая память реализованы при помощи Redis. Каждый Bubot имеет встроенный веб-сервер веб-сервер Tornado, который позволяет контролировать состояние, управлять роботом, на ходу менять параметры (калибровать) робота, а также закладывается возможность обмена данными между роботами. Bubot не является системой реального времени, хотя Bubot возможно интегрировать с кодом реального времени. Читать дальше →Фондовый рынок — высокотехнологичная и крайне конкурентная отрасль, где значительное внимание уделяется надежности и скорости работы используемых решений. Для этого разрабатываются технологии прямого доступа к бирже в обход брокерских систем, быстрые протоколы передачи данных и торговые терминалы нового поколения (прямо внутри которых можно «собирать» роботов для трейдинга). Кроме того, стиль многих торговцев подразумевает постоянный контроль за рыночной ситуацией, чтобы иметь возможность среагировать на изменившуюся конъюнктуру. Все это привело к тому, что эра мобильности на фондовом рынке (в том числе российском) наступила более 10 лет назад, значительно раньше, чем в некоторых других отраслях. В нашем сегодняшнем топике мы рассмотрим то, как изменялись интерфейсы мобильных торговых терминалов (на примере приложений ITinvest). Читать дальше →Эта публикация о том, как можно в Windows скомпилировать библиотеку для обработки видео и аудио FFmpeg под Android в Eclipse с помощью NDK. Вы узнаете, как связать FFmpeg с библиотекой для обработки изображений OpenCV и как это всё можно использовать в Java-коде Android приложения. Всё это будет рассказано в контексте процесса создания Android приложения, основной функционал которого как раз и завязан на использовании этих библиотек и их взаимодействии. Итак, заинтересованных прошу под кат. Читать дальше →На Хабре уже есть статьи о NoSQL СУБД Tarantool и о том, как его используют в Mail.Ru Group (и не только). Однако нет рецептов того, как работать с Tarantool на Python. В своей статье я хочу рассказать о том, как мы готовим Tarantool Python в своих проектах, какие проблемы и сложности при этом возникают, плюсы, минусы, подводные камни и, конечно же, «в чем фишка». Итак, обо всем по порядку. Tarantool представляет собой Application Server для Lua. Он умеет хранить данные на диске, обеспечивает быстрый доступ к ним. Tarantool используется в задачах с большими потоками данных в единицу времени. Если говорить о цифрах, то это десятки и сотни тысяч операций в секунду. Например, в одном из моих проектов генерируется более 80 000 запросов в секунду (выборка, вставка, обновление, удаление), при этом нагрузка равномерно распределяется по 4 серверам с 12 инстансами Tarantool. Не все современные СУБД готовы работать с такими нагрузками. Кроме того, при таком количестве данных, очень дорого ожидание выполнения запроса, поэтому сами программы должны быстро переключаться от одной задачи к другой. Для эффективной и равномерной загрузки CPU сервера (всех его ядер) как раз нужен Tarantool и асинхронные приемы в программировании. Читать дальше →Предлагаю читателям «Хабрахабра» перевод статьи «Why free monads matter». Интерпретаторы Хорошие программисты разделяют данные и интерпретаторы, которые эти данные обрабатывают. Примером могут служить компиляторы, представляющие исходный код как абстрактное синтаксическое дерево, которое впоследствие может быть обработано одним из многочисленных интерпретаторов. А именно, мы можем: скомпилировать и выполнить его; непосредственно запустить с помощью традиционного интерпретатора; сжать и архивировать; просто оставить его в покое. Преимущества такого разделения очевидны. Давайте попытаемся построить абстракцию, отображающую суть синтаксического дерева. Лучше начать с конкретного примера. Для этого мы спроектируем наш собственный игрушечный язык и попытается оформить его в виде типа данных. Читать дальше →
